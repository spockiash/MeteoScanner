@using MScanner.Factories
@using MScanner.Helpers
@using MScanner.Models.Models
@using MScanner.WebUI.Constants
@inject HttpClient Http;
@inject IUrlFactory UrlFactory

<div class="api-test-panel">
    <RadzenText TextStyle="TextStyle.H6">@_messageText</RadzenText>
    @if (!_isTestRunning)
    {
        <button @onclick="SetTimer">Start Test</button>
    }
    else
    {
        <button @onclick="StopTimer">Stop Test</button>
    }
</div>


@code {
    private Timer? _timer;
    private SensorDataModel? _currentData;
    private bool _isTestRunning = false;
    private string _messageText = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        UrlFactory.Initialize(ProjectConstants.ApiUrl);
        InitModel();
        //await base.OnInitializedAsync();
        //_currentData = MockupDataHelper.GetMockupInitData();
    }

    private void InitModel()
    {
        _currentData = MockupDataHelper.GetMockupInitData();
        _messageText = "Mockup initialized";
        StateHasChanged();
    }

    private void SetNext()
    {
        if (_currentData != null) _currentData = MockupDataHelper.GetNextMockup(_currentData);
    }

    private async Task SetTimer()
    {
        _isTestRunning = true;
        _messageText = "Test started";
        _timer = new Timer(async (object? stateInfo) => { await TriggerTest(stateInfo);}, new System.Threading.AutoResetEvent(false), 5000, 5000);
        StateHasChanged();
    }

    private async Task StopTimer()
    {
        if (_timer != null) await _timer.DisposeAsync();
        _messageText = "Test stopped";
        _isTestRunning = false;
        StateHasChanged();
    }

    private async Task TriggerTest(object? stateInfo)
    {
        SetNext();
        var url = UrlFactory.CreateUrl(EndPoints.SensorData);
        await Http.PostAsJsonAsync(url, _currentData);
        _messageText = "POST call to API";
        StateHasChanged();
    }
}
