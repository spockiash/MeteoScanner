@page "/SensorData"
@using Microsoft.AspNetCore.SignalR.Client
@using MScanner.Factories
@using MScanner.Helpers
@using MScanner.Models.Models

@using MScanner.WebUI.Constants
@using MScanner.WebUI.Hubs.MScanner.WebUI.Hubs
@using Timer = System.Threading.Timer
@inject HubConnection HubConnection

@inject IUrlFactory UrlFactory
@inject IHubConnectionFactory HubConnectionFactory

<h1>Sensor Data</h1>
<ApiTester></ApiTester>
<SensorStreamGrid @ref="_grid"></SensorStreamGrid>

@code {
    private SensorStreamGrid? _grid;
    private readonly List<SensorDataModel> _sensorDataList = new();

    private SensorDataHubProxy? _sensorDataHubProxy;



    private HubConnection? _hubConnection;


    protected override async Task OnInitializedAsync()
    {
        //set url factory
        UrlFactory.Initialize(ProjectConstants.ApiUrl);

        //setup hub proxy connection
        if (await NetworkHelper.IsApiOnline(UrlFactory.CreateUrl(EndPoints.Ping)))
        {
            await EstablishConnection();
        }
    }

    private async Task EstablishConnection()
    {
        _hubConnection = HubConnectionFactory.GetConnectionBuilder(UrlFactory.CreateUrl(EndPoints.SensorDataHub));
        _sensorDataHubProxy = new SensorDataHubProxy(_hubConnection);
        if (_sensorDataHubProxy != null)
        {
            await _sensorDataHubProxy.ConnectAsync();
            _sensorDataHubProxy.RegisterHandlers("ReceiveSensorData", OnReceiveSensorData);
        }
    }


    public async ValueTask DisposeAsync()
    {
        if (_sensorDataHubProxy != null) await _sensorDataHubProxy.DisconnectAsync();
    }

    private void OnReceiveSensorData(SensorDataModel sensorData)
    {
        _sensorDataList.Add(sensorData);
        _grid?.AddSensorData(sensorData);
        StateHasChanged();
    }
}