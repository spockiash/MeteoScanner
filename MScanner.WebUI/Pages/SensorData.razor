@page "/SensorData"
@using Microsoft.AspNetCore.SignalR.Client
@using MScanner.Helpers
@using MScanner.Models.Models
@using MScanner.Services.Api
@using MScanner.WebUI.Hubs.MScanner.WebUI.Hubs
@using Timer = System.Threading.Timer
@inject HubConnection HubConnection
@inject ISensorDataFilteringService SensorDataFilteringService

<h1>Sensor Data</h1>

<SensorStreamGrid @ref="_grid"></SensorStreamGrid>

@code {
    private SensorStreamGrid? _grid;
    private readonly List<SensorDataModel> _sensorDataList = new();
    private SensorDataHubProxy? _sensorDataHubProxy;
    private HubConnection _hubConnection;
    public Timer Timer { get; set; }
    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7080/sensorDataHub")
            .WithAutomaticReconnect()
            .Build();

        _sensorDataHubProxy = new SensorDataHubProxy(_hubConnection);

        await _sensorDataHubProxy.ConnectAsync();
        _sensorDataHubProxy.RegisterHandlers("ReceiveSensorData", OnReceiveSensorData);
    }

    public async ValueTask DisposeAsync()
    {
        if (_sensorDataHubProxy != null) await _sensorDataHubProxy.DisconnectAsync();
    }

    private void OnReceiveSensorData(SensorDataModel sensorData)
    {
        _sensorDataList.Add(sensorData);
        SensorDataFilteringService.AddSensorData(sensorData);
        _grid?.AddSensorData(sensorData);
        var res = SensorDataFilteringService.FilterSensorDataStream(FilterDefinitionsHelper.TemperatureFilter(0,5));
        StateHasChanged();
    }
}